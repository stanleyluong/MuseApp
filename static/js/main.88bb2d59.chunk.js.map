{"version":3,"sources":["util/Spotify.js","Components/SearchBar/SearchBar.js","Components/Track/Track.js","Components/TrackList/TrackList.js","Components/SearchResults/SearchResults.js","Components/Playlist/Playlist.js","Components/App/App.js","reportWebVitals.js","index.js"],"names":["accessToken","SearchBar","props","state","term","search","bind","handleTermChange","e","stopPropagation","nativeEvent","stopImmediatePropagation","this","onSearch","setState","target","value","className","onSubmit","onChange","placeholder","type","React","Component","Track","addTrack","removeTrack","isRemoval","onClick","onAdd","track","onRemove","name","artist","album","renderAction","TrackList","tracks","map","id","SearchResults","searchResults","Playlist","handleNameChange","onNameChange","playlistName","playlistTracks","onSave","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","console","log","fetch","headers","Authorization","then","response","json","jsonResponse","items","artists","uri","savePlaylist","trackUris","length","userId","method","body","JSON","stringify","playlistId","uris","App","updatePlaylistName","find","savedTrack","playlist","push","newPlaylist","filter","alert","preventDefault","results","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.88bb2d59.chunk.js","sourcesContent":["let accessToken, clientID = 'c52ced1d33f34b66aea1905a4afe30d0',redirectURI='http://localhost:3000'\n\nconst Spotify = {\n    getAccessToken(){\n            if(accessToken) {\n                return accessToken;\n            }\n            const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n            const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n            if(accessTokenMatch && expiresInMatch) {\n                accessToken = accessTokenMatch[1];\n                const expiresIn = Number(expiresInMatch[1]);\n                window.setTimeout(() => accessToken = '', expiresIn * 1000);\n                window.history.pushState('Access Token', null, '/');\n                return accessToken;\n            } else {\n                const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientID}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectURI}`;\n                window.location = accessUrl;\n            }\n    },\n    search(term){\n        console.log('searching',term)\n        console.log(accessToken,'access token')\n        accessToken = Spotify.getAccessToken()\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`,{\n            headers: {\n                Authorization: `Bearer ${accessToken}`\n            }\n        }).then(response=>{\n            console.log('response',response)\n            return response.json()\n        }).then(jsonResponse=>{\n            console.log(jsonResponse.tracks.items)\n            if(!jsonResponse.tracks){\n                return []\n            }\n            return jsonResponse.tracks.items.map(track=>{\n                return {\n                    id: track.id,\n                    name: track.name,\n                    artist: track.artists[0].name,\n                    album: track.album.name,\n                    uri: track.uri\n                }\n            })\n        })\n    },\n    savePlaylist(name, trackUris) {\n        console.log(1);\n\n        if(!name || !trackUris.length) {\n            return;\n        }\n\n        console.log(2);\n\n        // const accessToken = Spotify.getAccessToken();\n        const headers = {Authorization: `Bearer ${accessToken}`};\n        let userId;\n        console.log(3);\n        return fetch('https://api.spotify.com/v1/me', {headers: headers})\n        .then(response => {\n            console.log(4);\n            return response.json();\n        })\n        .then(jsonResponse => {\n            console.log(5);\n            userId = jsonResponse.id;\n            return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, \n            {\n                headers: headers,\n                method: 'POST',\n                body: JSON.stringify({ name: name })\n            })\n            .then(response => {\n                console.log(6);\n                return response.json();\n            })\n            .then(jsonResponse => {\n                console.log(7);\n                const playlistId = jsonResponse.id;\n                return fetch(`https://api.spotify.com/v1/playlists/${playlistId}/tracks`,  //there is also an error here\n                {\n                    headers: headers,\n                    method: 'POST',\n                    body: JSON.stringify({ uris: trackUris })\n                })\n            })\n        })\n\n\n    }\n    // savePlaylist(playlistName,trackUriArray){\n    //     if(playlistName && trackUriArray){\n    //         let accesstoken = Spotify.getAccessToken()\n    //         console.log(accesstoken,'heiei')\n    //         let headers = {\n    //             Authorization: `Bearer ${accesstoken}`,\n    //         }\n    //         let id\n    //         return fetch(`https://api.spotify.com/v1/me`, {\n    //             headers: headers\n    //         })\n    //         .then(response=>{\n    //             return response.json()\n    //         })\n    //         .then(jsonResponse=>{\n    //             console.log(jsonResponse)\n    //             id = jsonResponse.id\n\n    //             return fetch(`https://api.spotify/v1/users/${id}/playlists`,{\n    //                 headers:headers,\n    //                 method: 'POST',\n    //                 body: JSON.stringify({\n    //                     name: playlistName\n    //                 })\n    //             })\n    //             .then(response=>{\n    //                 return response.json()\n    //             })\n    //             .then(jsonResponse=>{\n    //                 let playlistID = jsonResponse.id  \n    //                 return fetch(`https://api.spotify.com/v1/users/${id}/playlists/${playlistID}/tracks`,{\n    //                     headers:headers,\n    //                     method: 'POST',\n    //                     body: JSON.stringify({\n    //                         uris: trackUriArray\n    //                     })\n    //                 })\n    //             })\n    //         })\n    //     } else {\n    //         return\n    //     }\n    // }\n}\n///\nexport default Spotify\n\n// const clientID = '********************';\n// const redirectURI = \"http://localhost:3000/\";\n\n// let accessToken;\n// const Spotify = {\n//     getAccessToken() {\n//         if(accessToken) {\n//             return accessToken;\n//         }\n\n//         //check for access token match\n//         const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n//         const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n\n//         //check if access token and expiry time are in the URL\n//         if(accessTokenMatch && expiresInMatch) {\n//             accessToken = accessTokenMatch[1];\n//             const expiresIn = Number(expiresInMatch[1]);\n//             //this clears the parameters and allows us to grab a new access token when it expires\n//             window.setTimeout(() => accessToken = '', expiresIn * 1000);\n//             window.history.pushState('Access Token', null, '/');\n//             return accessToken;\n//         } else {\n//             const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientID}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectURI}`;\n//             window.location = accessUrl;\n//         }\n//     },\n\n//     search(term) {\n//         const accessToken = Spotify.getAccessToken();\n//         return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {headers: {\n//             Authorization: `Bearer ${accessToken}`\n//             }\n//         })\n//         .then(response => {\n//             return response.json();\n//         })\n//         .then(jsonResponse => {\n//             if(!jsonResponse.tracks) {\n//                 return [];\n//             }\n//             return jsonResponse.tracks.items.map(track => ({\n//                 id: track.id,\n//                 name: track.name,\n//                 artist: track.artists[0].name,\n//                 album: track.album.name,\n//                 URI: track.uri\n//             })) //end of map\n\n//         }) //end of then\n//     }, //end of search\n\n//     savePlaylist(name, trackUris) {\n\n//         if(!name || !trackUris.length) {\n//             return;\n//         }\n\n//         const accessToken = Spotify.getAccessToken();\n//         const headers = {Authorization: `Bearer ${accessToken}`};\n//         let userId;\n\n//         return fetch('https://api.spotify.com/v1/me', {headers: headers})\n//         .then(response => {\n//             return response.json();\n//         })\n//         .then(jsonResponse => {\n//             userId = jsonResponse.id;\n//             return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, \n//             {\n//                 headers: headers,\n//                 method: 'POST',\n//                 body: JSON.stringify({ name: name })\n//             })\n//             .then(response => {\n//                 return response.json();\n//             })\n//             .then(jsonResponse => {\n//                 const playlistId = jsonResponse.id;\n//                 return fetch(`https://api.spotify.com/v1/playlists/${playlistId}/tracks`,  //there is also an error here\n//                 {\n//                     headers: headers,\n//                     method: 'POST',\n//                     body: JSON.stringify({ uris: trackUris })\n//                 })\n//             })\n//         })\n\n\n//     } //end of savePlaylist\n// }; //end of Spotify\n\n// export default Spotify;","import React from 'react'\nimport './SearchBar.css'\nclass SearchBar extends React.Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            term: ''\n        }\n        this.search = this.search.bind(this)\n        this.handleTermChange = this.handleTermChange.bind(this)\n    }\n    search(e){\n        // e.preventDefault()\n        e.stopPropagation();\n        e.nativeEvent.stopImmediatePropagation();\n        this.props.onSearch(this.state.term,e)\n    }\n    handleTermChange(e){\n        this.setState({\n            term: e.target.value\n        })\n    }\n    render(){\n        return (\n            <div className=\"SearchBar\">\n                <form onSubmit={this.search}>\n                    <input onChange={this.handleTermChange} placeholder=\"Enter A Song, Album, or Artist\"/>\n                    <button type='submit' className=\"SearchButton\">SEARCH</button>\n                </form> \n            </div>\n        )\n    }\n}\n\nexport default SearchBar","import React from 'react'\nimport './Track.css'\n\nclass Track extends React.Component {\n    constructor(props){\n        super(props)\n        this.addTrack = this.addTrack.bind(this)\n        this.removeTrack = this.removeTrack.bind(this)\n    }\n    renderAction(){\n        return this.props.isRemoval ? <button className=\"Track-action\" onClick={this.removeTrack}>-</button> : <button className=\"Track-action\" onClick={this.addTrack}>+</button>\n    }\n    addTrack(){\n        this.props.onAdd(this.props.track)\n    }\n    removeTrack(){\n        this.props.onRemove(this.props.track)\n    }\n    render(){\n        return (\n            <div className=\"Track\">\n            <div className=\"Track-information\">\n                <h3>{this.props.track.name}</h3>\n                <p>{this.props.track.artist} | {this.props.track.album}</p>\n            </div>\n            {this.renderAction()}\n        </div>\n        )\n    }\n}\n\nexport default Track","import React from 'react'\nimport Track from '../Track/Track.js'\nimport './TrackList.css'\n\nclass TrackList extends React.Component {\n    render(){\n        return (\n            <div className=\"TrackList\">\n            {this.props.tracks ? this.props.tracks.map(track=>{\n                return <Track onRemove={this.props.onRemove} isRemoval={this.props.isRemoval} onAdd={this.props.onAdd} key={track.id} track={track}/>\n            }) : <h1>empty playlist</h1>\n        }\n        </div>\n        )\n    }\n}\n\nexport default TrackList","import React from 'react'\nimport TrackList from '../TrackList/TrackList.js'\nimport './SearchResults.css'\nclass SearchResults extends React.Component {\n    render(){\n        return (\n            <div className=\"SearchResults\">\n            <h2>Results</h2>\n            <TrackList isRemoval={false} onAdd={this.props.onAdd} tracks={this.props.searchResults}/>\n            </div>\n        )\n    }\n}\n\nexport default SearchResults","import React from 'react'\nimport TrackList from '../../Components/TrackList/TrackList.js'\nimport './Playlist.css'\n\nclass Playlist extends React.Component {\n    constructor(props){\n        super(props)\n        this.handleNameChange = this.handleNameChange.bind(this)\n    }\n    handleNameChange(e){\n        this.props.onNameChange(e.target.value)\n    }\n    render(){\n        return (\n            <div className=\"Playlist\">\n                {/* <form onSubmit={this.props.onSave}> */}\n                    <input id=\"playlistnameinput\" onChange={this.handleNameChange} placeholder=\"Enter Playlist Name\" value={this.props.playlistName}/>\n                    <TrackList onRemove={this.props.onRemove} isRemoval={true} tracks={this.props.playlistTracks}/>\n                    <button className=\"Playlist-save\" type='submit' onClick={this.props.onSave}>SAVE TO SPOTIFY</button>\n                {/* </form> */}\n            \n        </div>\n        )\n    }\n}\n\nexport default Playlist","import './App.css'\nimport SearchBar from '../../Components/SearchBar/SearchBar.js'\nimport SearchResults from '../../Components/SearchResults/SearchResults.js'\nimport Playlist from '../../Components/Playlist/Playlist.js'\nimport React from 'react'\nimport Spotify from '../../util/Spotify.js'\n\nclass App extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      searchResults: [],\n      playlistTracks: [],\n      playlistName: \"New Playlist\"\n    }\n    this.addTrack = this.addTrack.bind(this)\n    this.removeTrack = this.removeTrack.bind(this)\n    this.updatePlaylistName = this.updatePlaylistName.bind(this)\n    this.savePlaylist = this.savePlaylist.bind(this)\n    this.search = this.search.bind(this)\n  }\n  addTrack(track){\n    if(this.state.playlistTracks.find(savedTrack=>\n      savedTrack.id === track.id)){\n      return\n    } else {\n      let playlist = this.state.playlistTracks\n      playlist.push(track)\n      this.setState({\n        playlistTracks: playlist\n      })\n    }\n  }\n  removeTrack(track){\n    let newPlaylist = this.state.playlistTracks.filter(savedTrack=> savedTrack.id!==track.id)\n    this.setState({\n      playlistTracks: newPlaylist\n    })\n  }\n  updatePlaylistName(name){\n    this.setState({\n      playlistName: name\n    })\n  }\n  savePlaylist(){\n    let uris = this.state.playlistTracks.map(track=> track.uri)\n    console.log(uris)\n    Spotify.savePlaylist(this.state.playlistName,uris)\n    .then(()=>{\n      alert(`Your playlist ${this.state.playlistName} has been saved to Spotify!`)\n      console.log(this.state,'before set state')\n      this.setState({\n        playlistName: \"New Playlist\",\n        playlistTracks: []\n      },()=>{\n        console.log(this.state,'during')\n      })\n      console.log(this.state,'after set state')\n    })\n  }\n  search(term,e){\n    e.preventDefault()\n    Spotify.search(term).then(results=>{\n      this.setState({\n        searchResults: results\n      })\n    })\n  }\n  render(){\n    return (\n      <div>\n        <h1>Muse<span className=\"highlight\"></span>App</h1>\n        <div className=\"App\">\n          <SearchBar \n            onSearch={this.search}/>\n        <div className=\"App-playlist\">\n        <SearchResults \n            onAdd={this.addTrack} \n            searchResults={this.state.searchResults}/>\n          <Playlist \n            onSave={this.savePlaylist} \n            onNameChange={this.updatePlaylistName} \n            onRemove={this.removeTrack} \n            playlistName={this.state.playlistName} \n            playlistTracks={this.state.playlistTracks}/>\n        </div>\n        </div>\n      </div>\n    );\n  }\n\n  componentDidMount(){\n    Spotify.getAccessToken()\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from '../src/Components/App/App.js';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}